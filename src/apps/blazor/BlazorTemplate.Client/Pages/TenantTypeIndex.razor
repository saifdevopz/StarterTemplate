@* @page "/tenanttype/index"

<h3>TenantTypeIndex</h3>

<SfGrid ID="Grid" @ref="DefaultGrid" DataSource="@TenantTypes" Toolbar="@ToolbarItems" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowPdfExport="true">
    <GridPageSettings PageSize="5"></GridPageSettings>
    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
    <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="ReadTenantTypeDto"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(ReadTenantTypeDto.TenantTypeId)" HeaderText="Order ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
        <GridColumn Field=@nameof(ReadTenantTypeDto.TenantTypeCode) HeaderText="Tenant COde" Width="150"></GridColumn>
        <GridColumn Field=@nameof(ReadTenantTypeDto.TenantTypeName) HeaderText="Tenant Name" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
    </GridColumns>    
</SfGrid>

@code {
    private SfGrid<ReadTenantTypeDto> DefaultGrid = new SfGrid<ReadTenantTypeDto>();
    private List<string> ToolbarItems = new List<string>() { "Add", "Edit", "Update", "Delete", "Cancel", "Search", "Print", "PdfExport" };
    private List<ReadTenantTypeDto> TenantTypes { get; set; } = new();


    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_pdfexport")  //Id is combination of Grid's ID and itemname
        {
            await DefaultGrid.ExportToPdfAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetTenantTypesAsync();
        StateHasChanged();
    }

    private async Task GetTenantTypesAsync()
    {
        var response = await _tenantTypeService.GetAll(Constants.TenantTypeUrl);

        if (response.IsSuccess)
        {
            TenantTypes = response.Value.ToList();
        }
        else
        {
            Console.WriteLine("Error Occured");
        }
    }
}
 *@